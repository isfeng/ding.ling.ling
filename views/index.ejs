<!DOCTYPE html>
<html>
<head>
    <title>ding.ling.ling~ding.ling.ling</title>
    <meta charset="utf-8" />
    <meta name="google" content="notranslate" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel='stylesheet' href='/stylesheets/reset.css' />
	<link rel='stylesheet' href='/stylesheets/animate-custom.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="http://code.createjs.com/easeljs-0.6.1.min.js"></script>
    <script src="/javascripts/underscore-min.js"></script>
    <script src="/javascripts/profile.js"></script>
    <script type="text/javascript" src="http://platform.linkedin.com/in.js">
      api_key: 1qj6x0r7pg21
      onLoad: onLinkedInLoad
      authorize: true
    </script>
</head>
<body onload="init()">


	<div id="signin" class="animated pulse">
		<script type="IN/Login"></script>
	</div>

	<div class="canvas_holder">
		<canvas id="canvax"></canvas>
	</div>

	<script type="text/javascript">
		
		var canvas, stage, me, mouseX, mouseY, connections=[];

		function onLinkedInLoad() {
			IN.Event.on(IN, "auth", function() {
				onLinkedInLogin();
			});
			IN.Event.on(IN, "logout", function() {
				onLinkedInLogout();
			});
		}

		function onLinkedInLogout() {
			
		}

		function onLinkedInLogin() {
			IN.API.Profile("me")
				.fields(["id", "firstName", "lastName", "pictureUrl", "publicProfileUrl"])
				.result(function(result) {
					// setLoginBadge(result.values[0]);
					show_me(result.values[0]);
				}).error(function(err) {
					alert(err);
				});

			IN.API.Connections("me")
				.fields("id", "firstName", "lastName", "pictureUrl", "publicProfileUrl")
				.result(function(result, metadata) {
					// setConnections(result.values, metadata);
					show_connections(result.values);
				});
		}

		function show_me(profile) {
			me = new createjs.Bitmap(profile.pictureUrl);
			me.x = _.random(0, canvas.width-100);
			me.y = _.random(0, canvas.height-100);
			stage.addChild(me);
		};

		function show_connections(conns) {
			for (i in conns) {
				// console.log(conns[i].pictureUrl);
				if (conns[i].pictureUrl) {
					// var conn = new createjs.Bitmap(conns[i].pictureUrl);
					var x = _.random(0, canvas.width - 100);
					var y = _.random(0, canvas.height - 100);
					var easing = _.random(1, 5) / 500;
					var conn = new Profile(conns[i].pictureUrl, x, y, easing);
					conn.draw(stage);
					connections.push(conn);
				}
			}
		}

		function tick(event) {
			if (mouseX) {
				_.each(connections, function(conn) {
					conn.arround(me.x, me.y);
				});
				stage.update(event);
			}		
		}

		function init() {
			canvas = document.getElementById("canvax");
			stage = new createjs.Stage(canvas);
			canvas.width = window.innerWidth;
        	canvas.height = window.innerHeight;

        	stage.addEventListener("stagemousemove", function(evt) {
	            mouseX = evt.stageX;
	            mouseY = evt.stageY;
	        })

			createjs.Ticker.addEventListener("tick", tick);
			createjs.Ticker.setFPS(30);
		}

	</script>
</body>
</html>


